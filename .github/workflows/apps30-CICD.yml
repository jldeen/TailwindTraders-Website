on: [push]

name: apps30-cicd

jobs:
  deployInfra:
    runs-on: self-hosted
    steps:
    
    # checkout branch
    - uses: actions/checkout@master

    # log into Azure
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # create resource group
    - name: 'Create Resource Group'
      run: |
        az group create --subscription "${{ secrets.SUBSCRIPTION_NAME }}" --name ${{ secrets.RESOURCE_GROUP }} --location ${{ secrets.LOCATION }}
    
    # create VNet
    - name: 'Create Virtual Network'
      run: |
        az network vnet create --name igniteapps30vnet --subscription "${{ secrets.SUBSCRIPTION_NAME }}" --resource-group ${{ secrets.RESOURCE_GROUP }} --subnet-name default

    # create cosmos db
    - name: 'Create Cosmos DB'
      run: |
        az cosmosdb create --name ${{ secrets.COSMOS_DB_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --kind MongoDB --subscription "${{ secrets.SUBSCRIPTION_NAME }}"
    
    # create SQL Instance
    - name: 'Create SQL Instance'
      run: |
        az sql server create --location ${{ secrets.LOCATION }} --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.SQL_DB_NAME }} --admin-user ${{ secrets.SQL_ADMIN }} --admin-password ${{ secrets.SQL_PASSWORD }} --subscription "${{ secrets.SUBSCRIPTION_NAME }}"

        az sql server firewall-rule create --resource-group ${{ secrets.RESOURCE_GROUP }} --server ${{ secrets.SQL_DB_NAME }} --name azure --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0 --subscription "${{ secrets.SUBSCRIPTION_NAME }}"

        az sql db create --resource-group ${{ secrets.RESOURCE_GROUP }} --server ${{ secrets.SQL_DB_NAME }} --name tailwind --subscription "${{ secrets.SUBSCRIPTION_NAME }}"
    
    # create ACR
    - name: 'Create Azure Container Registry'
      run: |
        az acr create --resource-group ${{secrets.RESOURCE_GROUP }} --name ${{ secrets.ACR_NAME }} --sku Basic --subscription "${{ secrets.SUBSCRIPTION_NAME }}" --admin-enabled true

    # create appservice plan    
    - name: 'Create appservice plan'
      run: |
        az appservice plan create -g ${{ secrets.RESOURCE_GROUP }} -n ${{ secrets.WEBAPP_NAME }} --is-linux --sku S1

  buildContainer:
    runs-on: self-hosted
    needs: deployInfra
    steps:
    
    # checkout branch
    - uses: actions/checkout@master

    # log into Azure
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # docker login
    - name: 'Docker Login'
      uses: greenie-msft/container-actions/docker-login@master
      with:
        login-server: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # build/push docker image
    - name: 'build/push'
      run: |
        docker build Source/Tailwind.Traders.Web/ -t ${{ secrets.CONTAINER_REGISTRY }}/${{ secrets.WEBAPP_NAME }}:$GITHUB_SHA
        docker push ${{ secrets.CONTAINER_REGISTRY }}/${{ secrets.WEBAPP_NAME }}:$GITHUB_SHA
  
  deployContainer:
    runs-on: self-hosted
    needs: buildContainer
    steps:
      # create webapp
      - name: 'webapp create'
        run: |
          az webapp create --resource-group ${{ secrets.RESOURCE_GROUP }} --plan ${{ secrets.WEBAPP_NAME }} --name ${{ secrets.WEBAPP_NAME }} --deployment-container-image-name ${{ secrets.CONTAINER_REGISTRY }}/${{ secrets.WEBAPP_NAME }}:${{ github.sha }}

          az webapp log config -n ${{ secrets.WEBAPP_NAME }} -g ${{ secrets.RESOURCE_GROUP }} --web-server-logging filesystem

          az webapp config container set --name ${{ secrets.WEBAPP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --docker-custom-image-name ${{ secrets.CONTAINER_REGISTRY }}/${{ secrets.WEBAPP_NAME }}:${{ github.sha }} --docker-registry-server-url https://${{ secrets.CONTAINER_REGISTRY }} --docker-registry-server-user ${{ secrets.REGISTRY_USERNAME }} --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }}
          
          az webapp config appsettings set --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.WEBAPP_NAME }} --settings apiUrl=/api/v1 ApiUrlShoppingCart=/api/v1 productImagesUrl=${{ secrets.PRODUCT_IMAGES_URL }} SqlConnectionString="${{ secrets.SQL_CONNECTION_STRING }}" MongoConnectionString=${{ secrets.MONGODB_CONNECTION_STRING }}

      # logout
      - name: 'Azure logout'
        run: |
          az logout
